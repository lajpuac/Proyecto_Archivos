/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.metadatos;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Jesús Quemé
 */
public class Buscador extends javax.swing.JFrame {

    /**
     * Creates new form Buscador
     */
    public Buscador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        txtUrl = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Seleccionar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(txtUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(142, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(37, 37, 37)
                .addComponent(jButton1)
                .addContainerGap(132, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      JFileChooser fc = new JFileChooser();
        //Indicamos lo que podemos seleccionar
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        //Creamos el filtro
        FileNameExtensionFilter filtro = new FileNameExtensionFilter(".PDF", "pdf");
        //Le indicamos el filtro
        fc.setFileFilter(filtro);
        //Abrimos la ventana, guardamos la opcion seleccionada por el usuario
        int seleccion = fc.showOpenDialog(this);
        //Si el usuario, pincha en aceptar
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            //Seleccionamos el fichero
            File fichero = fc.getSelectedFile();
            //revisamos si es una carpeta
            if (fichero.isDirectory()) {
                //Ecribe la ruta del fichero seleccionado en el campo de texto
                this.txtUrl.setText(fichero.getAbsolutePath());
            } else {
                JOptionPane.showMessageDialog(null, "DEBE SELECCIONAR UNA CARPETA");
                this.txtUrl.setText("");

            }

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        LectorPDF archivo=new LectorPDF();
        if (this.txtUrl.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "DEBE SELECCIONAR UNA CARPETA");
        } else {
            ArrayList<PDF> doc = new ArrayList<PDF>();
            String url = "C:\\Users\\Jesús Quemé\\Desktop\\PDF";
            File carpeta = new File(url);
            String[] lista = carpeta.list();
            for (String file : lista) {
                File aux = new File(carpeta.getAbsolutePath(), file);
                if (aux.isDirectory()) {
                    //es una carpeta y hay que revisarla
                    ArrayList<PDF> AuxList= extracorRe(carpeta.getAbsolutePath()+File.separator+file);
                    for (PDF documento:AuxList) {
                    doc.add(documento);
                    }
                } else {
                    
                    if (ispdf(file)) {
                       
                          String pading = carpeta.getAbsolutePath() + File.separator + file;
                          PDF pdf=new PDF();
                        try {
                            archivo.LecturaBinariaPDF(url);
                            //pdf.setId(archivo.getId());
                            //archivo.incrementar();
                        } catch (IOException ex) {
                            Logger.getLogger(Buscador.class.getName()).log(Level.SEVERE, null, ex);
                        }
                         if (pdf != null) {
                             doc.add(pdf);
                        }
                    }
                }

            }
            
          
            try {
                archivo.LecturaBinariaPDF(url);
                Datos ventana=new Datos();
                ventana.setVisible(true);
                this.dispose();
                
            } catch (IOException ex) {
                Logger.getLogger(Buscador.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
     ArrayList<PDF> extracorRe(String ruta){
         LectorPDF archivo=new LectorPDF();
          ArrayList<PDF> doc=new ArrayList<PDF>(); 
          ArrayList<PDF> AuxList= new ArrayList<PDF>(); 
         File carpeta=new File(ruta);
          String[] lista = carpeta.list();
            for (String file : lista) {
                File aux = new File(carpeta.getAbsolutePath(), file);
                if (aux.isDirectory()) {
                    //es una carpeta y hay que revisarla
                   AuxList= extracorRe(carpeta.getAbsolutePath()+File.separator+file);
                    for (PDF track:AuxList) {
                    doc.add(track);
                    }
                } else {
                    //es un archivo se revisa si es de extencion mp3
                    if (ispdf(file)) {
                        //si tiene una extencion mp3
                          String pading = carpeta.getAbsolutePath() + File.separator + file;
                          PDF pdf=new PDF();
                        try {
                            archivo.LecturaBinariaPDF(ruta);
                        } catch (IOException ex) {
                            Logger.getLogger(Buscador.class.getName()).log(Level.SEVERE, null, ex);
                        }
                         if (pdf != null) {
                             doc.add(pdf);
                        }
                    }
                }

            }
            
           
         
            return doc;
     }
     public boolean ispdf(String valor) {
        boolean bandera = false;
        String[] cond = valor.split("[.]");
        for (int i = 0; i < cond.length; i++) {
            if (cond[i].equals("mp3")) {
                bandera=true;
            }
        }
       return bandera; 
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Buscador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Buscador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Buscador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Buscador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Buscador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JTextField txtUrl;
    // End of variables declaration//GEN-END:variables
}
